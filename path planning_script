import rclpy
from rclpy.node import Node
from std_msgs.msg import String
import random

class PathPlanner:
    def __init__(self, graph):
        self.graph = graph
        self.distance = {}
        self.previous = {}
        self.FV = set()
        self.PE = set()

    def dijkstra_with_random_failures(self, source, target):
        self.distance = {v: float('inf') for v in self.graph}
        self.previous = {v: None for v in self.graph}
        self.distance[source] = 0
        Q = set(self.graph.keys())

        t = random.randint(0, 4)
        for _ in range(t):
            i = random.choice(list(self.graph.keys()))
            if self.graph[i]:
                j = random.choice(list(self.graph[i].keys()))
                self.graph[i][j] = float('inf')
                self.graph[j][i] = float('inf')
                self.FV.add(i)
                self.FV.add(j)

        while Q:
            u = min(Q, key=lambda v: self.distance[v])
            Q.remove(u)

            if self.previous[u] is None and u not in self.FV:
                for v in self.graph[u]:
                    temp_dist = self.distance[u] + self.graph[u][v]
                    if temp_dist < self.distance[v]:
                        self.distance[v] = temp_dist
                        self.previous[v] = u

            for v in self.FV:
                for neighbor in self.graph[v]:
                    self.PE.add((v, neighbor))

            if self.PE:
                i, j = random.choice(list(self.PE))
                self.graph[i][j] = float('inf')
                self.graph[j][i] = float('inf')

        return self.reconstruct_path(source, target)

    def reconstruct_path(self, source, target):
        path = []
        while target is not None:
            path.insert(0, target)
            target = self.previous[target]
        return path if path and path[0] == source else []

class PlannerNode(Node):
    def __init__(self):
        super().__init__('path_planner_node')
        self.graph = self.example_graph()
        self.planner = PathPlanner(self.graph)
        self.source = None
        self.target = None

        self.path_pub = self.create_publisher(String, 'planned_path', 10)
        self.create_subscription(String, 'source_node', self.source_callback, 10)
        self.create_subscription(String, 'target_node', self.target_callback, 10)

        self.get_logger().info("Path planner node started.")

    def source_callback(self, msg):
        self.source = msg.data
        self.try_plan_path()

    def target_callback(self, msg):
        self.target = msg.data
        self.try_plan_path()

    def try_plan_path(self):
        if self.source and self.target:
            self.get_logger().info(f"Planning path from {self.source} to {self.target}...")
            path = self.planner.dijkstra_with_random_failures(self.source, self.target)
            self.get_logger().info(f"Computed path: {path}")
            self.path_pub.publish(String(data=str(path)))
            self.source = None
            self.target = None


def main(args=None):
    rclpy.init(args=args)
    node = PlannerNode()
    rclpy.spin(node)
    node.destroy_node()
    rclpy.shutdown()
